//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Types_ttypes = require('./Types_types');
var DAVUser_ttypes = require('./DAVUser_types');


var ttypes = module.exports = {};
var VehicleState = module.exports.VehicleState = function(args) {
  this.timestamp = null;
  this.coordinates = null;
  this.heading = null;
  this.height = null;
  this.battery_level = null;
  this.waypoints = null;
  this.mission_status = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.coordinates !== undefined && args.coordinates !== null) {
      this.coordinates = new Types_ttypes.Coordinates(args.coordinates);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field coordinates is unset!');
    }
    if (args.heading !== undefined && args.heading !== null) {
      this.heading = args.heading;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.battery_level !== undefined && args.battery_level !== null) {
      this.battery_level = args.battery_level;
    }
    if (args.waypoints !== undefined && args.waypoints !== null) {
      this.waypoints = Thrift.copyList(args.waypoints, [Types_ttypes.Coordinates]);
    }
    if (args.mission_status !== undefined && args.mission_status !== null) {
      this.mission_status = args.mission_status;
    }
  }
};
VehicleState.prototype = {};
VehicleState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.coordinates = new Types_ttypes.Coordinates();
        this.coordinates.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.heading = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.battery_level = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.waypoints = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Types_ttypes.Coordinates();
          elem6.read(input);
          this.waypoints.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mission_status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VehicleState.prototype.write = function(output) {
  output.writeStructBegin('VehicleState');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.STRUCT, 2);
    this.coordinates.write(output);
    output.writeFieldEnd();
  }
  if (this.heading !== null && this.heading !== undefined) {
    output.writeFieldBegin('heading', Thrift.Type.I16, 3);
    output.writeI16(this.heading);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I16, 4);
    output.writeI16(this.height);
    output.writeFieldEnd();
  }
  if (this.battery_level !== null && this.battery_level !== undefined) {
    output.writeFieldBegin('battery_level', Thrift.Type.BYTE, 5);
    output.writeByte(this.battery_level);
    output.writeFieldEnd();
  }
  if (this.waypoints !== null && this.waypoints !== undefined) {
    output.writeFieldBegin('waypoints', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.waypoints.length);
    for (var iter7 in this.waypoints)
    {
      if (this.waypoints.hasOwnProperty(iter7))
      {
        iter7 = this.waypoints[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mission_status !== null && this.mission_status !== undefined) {
    output.writeFieldBegin('mission_status', Thrift.Type.STRING, 7);
    output.writeString(this.mission_status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VehicleDetails = module.exports.VehicleDetails = function(args) {
  this.vehicleId = null;
  this.model = null;
  this.coordinates = null;
  this.rating = null;
  this.missions_completed = null;
  this.missions_completed_7_days = null;
  if (args) {
    if (args.vehicleId !== undefined && args.vehicleId !== null) {
      this.vehicleId = new DAVUser_ttypes.DAVUser(args.vehicleId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vehicleId is unset!');
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = args.model;
    }
    if (args.coordinates !== undefined && args.coordinates !== null) {
      this.coordinates = new Types_ttypes.Coordinates(args.coordinates);
    }
    if (args.rating !== undefined && args.rating !== null) {
      this.rating = args.rating;
    }
    if (args.missions_completed !== undefined && args.missions_completed !== null) {
      this.missions_completed = args.missions_completed;
    }
    if (args.missions_completed_7_days !== undefined && args.missions_completed_7_days !== null) {
      this.missions_completed_7_days = args.missions_completed_7_days;
    }
  }
};
VehicleDetails.prototype = {};
VehicleDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vehicleId = new DAVUser_ttypes.DAVUser();
        this.vehicleId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.model = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.coordinates = new Types_ttypes.Coordinates();
        this.coordinates.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rating = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.missions_completed = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.missions_completed_7_days = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VehicleDetails.prototype.write = function(output) {
  output.writeStructBegin('VehicleDetails');
  if (this.vehicleId !== null && this.vehicleId !== undefined) {
    output.writeFieldBegin('vehicleId', Thrift.Type.STRUCT, 1);
    this.vehicleId.write(output);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRING, 2);
    output.writeString(this.model);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.STRUCT, 3);
    this.coordinates.write(output);
    output.writeFieldEnd();
  }
  if (this.rating !== null && this.rating !== undefined) {
    output.writeFieldBegin('rating', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.rating);
    output.writeFieldEnd();
  }
  if (this.missions_completed !== null && this.missions_completed !== undefined) {
    output.writeFieldBegin('missions_completed', Thrift.Type.I16, 5);
    output.writeI16(this.missions_completed);
    output.writeFieldEnd();
  }
  if (this.missions_completed_7_days !== null && this.missions_completed_7_days !== undefined) {
    output.writeFieldBegin('missions_completed_7_days', Thrift.Type.I16, 6);
    output.writeI16(this.missions_completed_7_days);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

